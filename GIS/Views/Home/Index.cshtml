@{
    ViewBag.Title = "Index";
}
@using Newtonsoft.Json
@using GIS.Dto;
@model GIS.Models.Home.ConsumersModel


@section Styles {
    html { height: 100% }
    body { height: 100%; margin: 0px; padding: 0px }
    #map_canvas { height:500px; width:900px; }
}
<div id="directions_panel"></div>
<div id="map_canvas"></div>
@section scripts {
    <script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=false"></script>
    <script src="http://google-maps-utility-library-v3.googlecode.com/svn/trunk/markerclusterer/src/markerclusterer.js"
            type="text/javascript">
    </script>

    <script type="text/javascript">
        (function ($) {
            var map;
            var directionsRenderer;
            var markerArray = [];
            var directionsService;
            var renderArray = [];

            var colourArray = ['navy', 'grey', 'fuchsia', 'black', 'white', 'lime', 'maroon', 'purple', 'aqua', 'red', 'green', 'silver', 'olive', 'blue', 'yellow', 'teal'];

            function initialize(directionsRenderer, directionsService) {

                var latlng = new google.maps.LatLng('@Model.CityConsumers.First().Locations.First().Latitude',
                                                    '@Model.CityConsumers.First().Locations.First().Longitude');

                var mapOptions = {
                    zoom: 10,
                    mapTypeId: google.maps.MapTypeId.ROADMAP,
                    center: latlng,
                };

                debugger;
                map = new google.maps.Map(document.getElementById('map_canvas'), mapOptions);

                //directionsRenderer.setMap(map);
            }

            //function directionsResult(response, status) {
            //    if (status == google.maps.DirectionsStatus.OK) {
            //        directionsRenderer.setDirections(response);
            //        var route = response.routes[0];
            //        var summaryPanel = document.getElementById("directions_panel");
            //        summaryPanel.innerHTML = "";
            //        // For each route, display summary information.
            //        for (var i = 0; i < route.legs.length; i++) {
            //            var routeSegment = i+1;
            //            summaryPanel.innerHTML += "<b>Route Segment: " + routeSegment + "</b><br />";
            //            summaryPanel.innerHTML += route.legs[i].start_address + " to ";
            //            summaryPanel.innerHTML += route.legs[i].end_address + "<br />";
            //            summaryPanel.innerHTML += route.legs[i].distance.text + "<br /><br />";
            //        }
            //    }
            //}

            calcRoute =  function (batches, directionsRenderer, directionsService) {

                var combinedResults;
                var unsortedResults = [{}]; // to hold the counter and the results themselves as they come back, to later sort
                var directionsResultsReturned = 0;

                for (var k = 0; k < batches.length; k++) {
                    var lastIndex = batches[k].length - 1;
                    var start = batches[k][0].location;
                    var end = batches[k][lastIndex].location;

                    // trim first and last entry from array
                    var waypts = [];
                    waypts = batches[k];
                    waypts.splice(0, 1);
                    waypts.splice(waypts.length - 1, 1);

                    var request = {
                        origin : start,
                        destination : end,
                        waypoints : waypts,
                        travelMode : window.google.maps.TravelMode.WALKING
                    };
                    debugger;

                    (function (k) {
                        directionsService.route(request, function (result, status) {
                            if (status == window.google.maps.DirectionsStatus.OK) {

                                var unsortedResult = {
                                    order : k,
                                    result : result
                                };
                                unsortedResults.push(unsortedResult);

                                directionsResultsReturned++;

                                if (directionsResultsReturned == batches.length) // we've received all the results. put to map
                                {
                                    // sort the returned values into their correct order
                                    unsortedResults.sort(function (a, b) {
                                        return parseFloat(a.order) - parseFloat(b.order);
                                    });
                                    var count = 0;
                                    for (var key in unsortedResults) {
                                        if (unsortedResults[key].result != null) {
                                            if (unsortedResults.hasOwnProperty(key)) {
                                                if (count == 0) // first results. new up the combinedResults object
                                                    combinedResults = unsortedResults[key].result;
                                                else {
                                                    // only building up legs, overview_path, and bounds in my consolidated object. This is not a complete
                                                    // directionResults object, but enough to draw a path on the map, which is all I need
                                                    combinedResults.routes[0].legs = combinedResults.routes[0].legs.concat(unsortedResults[key].result.routes[0].legs);
                                                    combinedResults.routes[0].overview_path = combinedResults.routes[0].overview_path.concat(unsortedResults[key].result.routes[0].overview_path);

                                                    combinedResults.routes[0].bounds = combinedResults.routes[0].bounds.extend(unsortedResults[key].result.routes[0].bounds.getNorthEast());
                                                    combinedResults.routes[0].bounds = combinedResults.routes[0].bounds.extend(unsortedResults[key].result.routes[0].bounds.getSouthWest());
                                                }
                                                count++;
                                            }
                                        }
                                    }
                                    debugger;

                                    // Create a unique DirectionsRenderer
                                    batchRenderer = new google.maps.DirectionsRenderer();
                                    batchRenderer.setMap(map);

                                    batchRenderer.setOptions({
                                        preserveViewport: true,
                                        suppressInfoWindows: true,
                                        polylineOptions: {
                                            strokeWeight: 4,
                                            strokeOpacity: 0.8,
                                            strokeColor: colourArray[k]
                                        },
                                        markerOptions: {
                                            icon: {
                                                path: google.maps.SymbolPath.BACKWARD_CLOSED_ARROW,
                                                scale: 3,
                                                strokeColor: colourArray[k]
                                            }
                                        }
                                    });

                                    batchRenderer.setDirections(combinedResults);
                                }
                            }
                        });
                    })(k);
                }
            };


            function prepareBatch(stops)
            {
                var batches = [];
                var itemsPerBatch = 7; // google API max - 1 start, 1 stop, and 8 waypoints
                var itemsCounter = 0;
                var wayptsExist = stops.length > 0;

                while (wayptsExist) {
                    var subBatch = [];
                    var subitemsCounter = 0;

                    for (var j = itemsCounter; j < stops.length; j++) {
                        subitemsCounter++;
                        subBatch.push({
                            location: new google.maps.LatLng(stops[j].lat, stops[j].lng),
                            stopover: true
                        });
                        if (subitemsCounter == itemsPerBatch)
                            break;
                    }

                    itemsCounter += subitemsCounter;
                    batches.push(subBatch);
                    wayptsExist = itemsCounter < stops.length;
                    // If it runs again there are still points. Minus 1 before continuing to
                    // start up with end of previous tour leg
                    itemsCounter--;
                }

                return batches;
            }

            $(function () {
                directionsRenderer = new google.maps.DirectionsRenderer();
                // Instantiate a directions service.
                directionsService = new google.maps.DirectionsService();

                var consumers = @Html.Raw(Json.Encode(Model.CityConsumers
                                        .Select(x => new {
                                            lat = x.Locations.First().Latitude,
                                            lng = x.Locations.First().Longitude
                                        })))

                var electricLines = @Html.Raw(Json.Encode(Model.WireConsumers
                     .Select(x => new {
                         name = x.ConsumerType ,
                         coordinates = x.Locations.Select(c => new { lat = c.Latitude, lng = c.Longitude })
                     })))


                initialize(directionsRenderer, directionsService);

                for (var line = 0; line < electricLines.length; line++) {

                    var batchesReturned = prepareBatch(electricLines[line].coordinates);
                    calcRoute(batchesReturned, directionsRenderer, directionsService);
                }
            });

        })(jQuery);

    </script>
}
<ul>
    @foreach (var cityConsumer in Model.CityConsumers)
    {
        foreach (var location in cityConsumer.Locations)
        {
            <li>@location.Longitude - @location.Latitude </li>
        }
    }
</ul>

<ul>
    @foreach (var cityConsumer in Model.WireConsumers)
    {
        foreach (var location in cityConsumer.Locations)
        {
            <li>@location.Longitude  - @location.Latitude </li>
        }
    }
</ul>
