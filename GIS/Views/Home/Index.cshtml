@{
    ViewBag.Title = "Index";
}
@using Newtonsoft.Json
@using GIS.Dto;
@model GIS.Models.Home.ConsumersModel


@section Styles {
html { height: 100% }
    body { height: 100%; margin: 0px; padding: 0px }
    #map_canvas { height:500px; width:900px; }
}
<div id="directions_panel"></div>
<div id="map_canvas"></div>
@section scripts {
    <script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?sensor=true&v=3.exp"></script>
    <script type="text/javascript"
        src="http://google-maps-utility-library-v3.googlecode.com/svn/trunk/markerclusterer/src/markerclusterer_compiled.js"> </script>
    <script type="text/javascript"
        src="http://google-maps-utility-library-v3.googlecode.com/svn/trunk/richmarker/src/richmarker-compiled.js"> </script>
    <script type="text/javascript"
            src="@Url.Content("~/Scripts/Application/MultipleRoutesCombinations.js")"> </script>

    <script type="text/javascript">
        (function($) {
            var map;
            var colourArray = ['navy', 'fuchsia', 'black', 'white', 'lime', 'maroon', 'purple', 'aqua', 'red', 'green', 'silver', 'olive', 'blue', 'yellow', 'teal'];

            function initialize() {

                var latlng = new google.maps.LatLng('@Model.CityConsumers.First().Locations.First().Latitude',
                    '@Model.CityConsumers.First().Locations.First().Longitude');

                var mapOptions = {
                    zoom: 10,
                    mapTypeId: google.maps.MapTypeId.ROADMAP, //HYBRID
                    center: latlng,
                };

                map = new google.maps.Map(document.getElementById('map_canvas'), mapOptions);

            }

            function createMarkers(consumers) {
                var markers = [];

                for (var consumerIndex = 0; consumerIndex < consumers.length; consumerIndex++) {
                    var consumer = consumers[consumerIndex];

                    var marker = new RichMarker({
                        flat: false,
                        anchor: RichMarkerPosition.MIDDLE,
                        position: new google.maps.LatLng(consumer.lat, consumer.lng),
                        image: consumer.image,
                        consumerName: consumer.consumerName,
                        content: '<img src="data:image/png;base64,' + consumer.image + '" title="' + consumer.consumerName + '" class="my-map-marker" />'
                        //content: '<img src="' + './Images/orderedList9.png' + '" title="' + 'monkey' + '" class="my-map-marker" />'
                    });
                    google.maps.event.addListener(marker, 'click', onMarkerClick);
                    markers.push(marker);
                }

                new MarkerClusterer(map, markers);
            }

            function onMarkerClick(evt) {
                var imageNode = $('<img/>')
                    .attr('src', 'data:image/png;base64,' + this.image)
                    .attr('title', this.consumerName);


                var link1 = $('<a/>')
                    .attr('href', '#')
                    .text('Schema monofilara');

                var link2 = $('<a/>')
                    .attr('href', '#')
                    .text('Statistica');

                var divContent = $("<div/>")
                    .addClass('clear-fix')
                    .append(imageNode)
                    .append(link1)
                    .append(link2);

                var infowindow = new google.maps.InfoWindow({
                    content: divContent.html()
                });

                infowindow.open(map, this);
            }

            function createPolylinePaths(electricLineWaypoints, index) {
                var electricWPCoordinates = electricLineWaypoints.coordinates;
                var wayPointArray = [];
                for (var wayPoint = 0; wayPoint < electricWPCoordinates.length; wayPoint++) {
                    wayPointArray
                        .push(new google.maps.LatLng(electricWPCoordinates[wayPoint].lat,
                            electricWPCoordinates[wayPoint].lng));
                }
                var lineSymbol = {
                    path: google.maps.SymbolPath.CIRCLE
                };

                var polylineOptions = {
                    geodesic: true,
                    strokeColor: colourArray[index],
                    strokeOpacity: 0.6,
                    strokeWeight: 5,
                    //icons: [{ icon: lineSymbol,
                    //    offset: '100%'}]
                };

                var path = new google.maps.Polyline({
                    path: wayPointArray,
                });
                path.setOptions(polylineOptions);
                path.setMap(map);

            }

            $(function() {
                // Instantiate a directions service.
                directionsService = new google.maps.DirectionsService();

                var consumers = @Html.Raw(Json.Encode(Model.CityConsumers
                                                           .Select(x => new
                                                               {
                                                                   lat = x.Locations.First().Latitude,
                                                                   lng = x.Locations.First().Longitude,
                                                                   consumerName = x.ConsumerName,
                                                                   image = Convert.ToBase64String(x.Image)
                                                               })))

                var electricLines = @Html.Raw(Json.Encode(Model.WireConsumers
                                                               .Select(x => new
                                                                   {
                                                                       name = x.ConsumerType,
                                                                       coordinates = x.Locations.Select(c => new { lat = c.Latitude, lng = c.Longitude })
                                                                   })))

                initialize();

                createMarkers(consumers);
                //Draw route with Polyline 
                for (var line = 0; line < electricLines.length; line++) {
                    createPolylinePaths(electricLines[line], line);
                }

                ////Draw routes with combined waypoints and multiple routes 
                //for (var line = 0; line < electricLines.length; line++) {
                //    var batchesReturned = prepareBatch(electricLines[line].coordinates);
                //    calcRoute(batchesReturned, directionsService, map, colourArray);
                //}
            });

        })(jQuery);

    </script>
}
